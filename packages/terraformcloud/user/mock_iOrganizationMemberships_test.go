// Code generated by mockery. DO NOT EDIT.

package user

import (
	context "context"

	tfe "github.com/hashicorp/go-tfe"
	mock "github.com/stretchr/testify/mock"
)

// mockIOrganizationMemberships is an autogenerated mock type for the iOrganizationMemberships type
type mockIOrganizationMemberships struct {
	mock.Mock
}

type mockIOrganizationMemberships_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIOrganizationMemberships) EXPECT() *mockIOrganizationMemberships_Expecter {
	return &mockIOrganizationMemberships_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, organization, options
func (_m *mockIOrganizationMemberships) List(ctx context.Context, organization string, options *tfe.OrganizationMembershipListOptions) (*tfe.OrganizationMembershipList, error) {
	ret := _m.Called(ctx, organization, options)

	var r0 *tfe.OrganizationMembershipList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.OrganizationMembershipListOptions) (*tfe.OrganizationMembershipList, error)); ok {
		return rf(ctx, organization, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.OrganizationMembershipListOptions) *tfe.OrganizationMembershipList); ok {
		r0 = rf(ctx, organization, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.OrganizationMembershipList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *tfe.OrganizationMembershipListOptions) error); ok {
		r1 = rf(ctx, organization, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIOrganizationMemberships_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type mockIOrganizationMemberships_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - organization string
//   - options *tfe.OrganizationMembershipListOptions
func (_e *mockIOrganizationMemberships_Expecter) List(ctx interface{}, organization interface{}, options interface{}) *mockIOrganizationMemberships_List_Call {
	return &mockIOrganizationMemberships_List_Call{Call: _e.mock.On("List", ctx, organization, options)}
}

func (_c *mockIOrganizationMemberships_List_Call) Run(run func(ctx context.Context, organization string, options *tfe.OrganizationMembershipListOptions)) *mockIOrganizationMemberships_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*tfe.OrganizationMembershipListOptions))
	})
	return _c
}

func (_c *mockIOrganizationMemberships_List_Call) Return(_a0 *tfe.OrganizationMembershipList, _a1 error) *mockIOrganizationMemberships_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIOrganizationMemberships_List_Call) RunAndReturn(run func(context.Context, string, *tfe.OrganizationMembershipListOptions) (*tfe.OrganizationMembershipList, error)) *mockIOrganizationMemberships_List_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockIOrganizationMemberships interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIOrganizationMemberships creates a new instance of mockIOrganizationMemberships. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIOrganizationMemberships(t mockConstructorTestingTnewMockIOrganizationMemberships) *mockIOrganizationMemberships {
	mock := &mockIOrganizationMemberships{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
