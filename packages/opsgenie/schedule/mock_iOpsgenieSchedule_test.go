// Code generated by mockery. DO NOT EDIT.

package schedule

import (
	context "context"

	opsgenie_go_sdk_v2schedule "github.com/opsgenie/opsgenie-go-sdk-v2/schedule"
	mock "github.com/stretchr/testify/mock"
)

// mockIOpsgenieSchedule is an autogenerated mock type for the iOpsgenieSchedule type
type mockIOpsgenieSchedule struct {
	mock.Mock
}

type mockIOpsgenieSchedule_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIOpsgenieSchedule) EXPECT() *mockIOpsgenieSchedule_Expecter {
	return &mockIOpsgenieSchedule_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, request
func (_m *mockIOpsgenieSchedule) Get(ctx context.Context, request *opsgenie_go_sdk_v2schedule.GetRequest) (*opsgenie_go_sdk_v2schedule.GetResult, error) {
	ret := _m.Called(ctx, request)

	var r0 *opsgenie_go_sdk_v2schedule.GetResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsgenie_go_sdk_v2schedule.GetRequest) (*opsgenie_go_sdk_v2schedule.GetResult, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsgenie_go_sdk_v2schedule.GetRequest) *opsgenie_go_sdk_v2schedule.GetResult); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsgenie_go_sdk_v2schedule.GetResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsgenie_go_sdk_v2schedule.GetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIOpsgenieSchedule_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockIOpsgenieSchedule_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - request *opsgenie_go_sdk_v2schedule.GetRequest
func (_e *mockIOpsgenieSchedule_Expecter) Get(ctx interface{}, request interface{}) *mockIOpsgenieSchedule_Get_Call {
	return &mockIOpsgenieSchedule_Get_Call{Call: _e.mock.On("Get", ctx, request)}
}

func (_c *mockIOpsgenieSchedule_Get_Call) Run(run func(ctx context.Context, request *opsgenie_go_sdk_v2schedule.GetRequest)) *mockIOpsgenieSchedule_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*opsgenie_go_sdk_v2schedule.GetRequest))
	})
	return _c
}

func (_c *mockIOpsgenieSchedule_Get_Call) Return(_a0 *opsgenie_go_sdk_v2schedule.GetResult, _a1 error) *mockIOpsgenieSchedule_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIOpsgenieSchedule_Get_Call) RunAndReturn(run func(context.Context, *opsgenie_go_sdk_v2schedule.GetRequest) (*opsgenie_go_sdk_v2schedule.GetResult, error)) *mockIOpsgenieSchedule_Get_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRotation provides a mock function with given fields: ctx, request
func (_m *mockIOpsgenieSchedule) UpdateRotation(ctx context.Context, request *opsgenie_go_sdk_v2schedule.UpdateRotationRequest) (*opsgenie_go_sdk_v2schedule.UpdateRotationResult, error) {
	ret := _m.Called(ctx, request)

	var r0 *opsgenie_go_sdk_v2schedule.UpdateRotationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsgenie_go_sdk_v2schedule.UpdateRotationRequest) (*opsgenie_go_sdk_v2schedule.UpdateRotationResult, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsgenie_go_sdk_v2schedule.UpdateRotationRequest) *opsgenie_go_sdk_v2schedule.UpdateRotationResult); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsgenie_go_sdk_v2schedule.UpdateRotationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsgenie_go_sdk_v2schedule.UpdateRotationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIOpsgenieSchedule_UpdateRotation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRotation'
type mockIOpsgenieSchedule_UpdateRotation_Call struct {
	*mock.Call
}

// UpdateRotation is a helper method to define mock.On call
//   - ctx context.Context
//   - request *opsgenie_go_sdk_v2schedule.UpdateRotationRequest
func (_e *mockIOpsgenieSchedule_Expecter) UpdateRotation(ctx interface{}, request interface{}) *mockIOpsgenieSchedule_UpdateRotation_Call {
	return &mockIOpsgenieSchedule_UpdateRotation_Call{Call: _e.mock.On("UpdateRotation", ctx, request)}
}

func (_c *mockIOpsgenieSchedule_UpdateRotation_Call) Run(run func(ctx context.Context, request *opsgenie_go_sdk_v2schedule.UpdateRotationRequest)) *mockIOpsgenieSchedule_UpdateRotation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*opsgenie_go_sdk_v2schedule.UpdateRotationRequest))
	})
	return _c
}

func (_c *mockIOpsgenieSchedule_UpdateRotation_Call) Return(_a0 *opsgenie_go_sdk_v2schedule.UpdateRotationResult, _a1 error) *mockIOpsgenieSchedule_UpdateRotation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIOpsgenieSchedule_UpdateRotation_Call) RunAndReturn(run func(context.Context, *opsgenie_go_sdk_v2schedule.UpdateRotationRequest) (*opsgenie_go_sdk_v2schedule.UpdateRotationResult, error)) *mockIOpsgenieSchedule_UpdateRotation_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockIOpsgenieSchedule interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIOpsgenieSchedule creates a new instance of mockIOpsgenieSchedule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIOpsgenieSchedule(t mockConstructorTestingTnewMockIOpsgenieSchedule) *mockIOpsgenieSchedule {
	mock := &mockIOpsgenieSchedule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
