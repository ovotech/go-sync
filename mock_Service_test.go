// Code generated by mockery v2.14.0. DO NOT EDIT.

package gosync

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// SyncWith provides a mock function with given fields: ctx, adapter
func (_m *MockService) SyncWith(ctx context.Context, adapter Adapter) error {
	ret := _m.Called(ctx, adapter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Adapter) error); ok {
		r0 = rf(ctx, adapter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SyncWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncWith'
type MockService_SyncWith_Call struct {
	*mock.Call
}

// SyncWith is a helper method to define mock.On call
//   - ctx context.Context
//   - adapter Adapter
func (_e *MockService_Expecter) SyncWith(ctx interface{}, adapter interface{}) *MockService_SyncWith_Call {
	return &MockService_SyncWith_Call{Call: _e.mock.On("SyncWith", ctx, adapter)}
}

func (_c *MockService_SyncWith_Call) Run(run func(ctx context.Context, adapter Adapter)) *MockService_SyncWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Adapter))
	})
	return _c
}

func (_c *MockService_SyncWith_Call) Return(_a0 error) *MockService_SyncWith_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
