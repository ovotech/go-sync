// Code generated by mockery. DO NOT EDIT.

package discovery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGitHubDiscovery is an autogenerated mock type for the GitHubDiscovery type
type MockGitHubDiscovery struct {
	mock.Mock
}

type MockGitHubDiscovery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitHubDiscovery) EXPECT() *MockGitHubDiscovery_Expecter {
	return &MockGitHubDiscovery_Expecter{mock: &_m.Mock}
}

// GetEmailFromUsername provides a mock function with given fields: ctx, usernames
func (_m *MockGitHubDiscovery) GetEmailFromUsername(ctx context.Context, usernames []string) ([]string, error) {
	ret := _m.Called(ctx, usernames)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailFromUsername")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]string, error)); ok {
		return rf(ctx, usernames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = rf(ctx, usernames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, usernames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitHubDiscovery_GetEmailFromUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmailFromUsername'
type MockGitHubDiscovery_GetEmailFromUsername_Call struct {
	*mock.Call
}

// GetEmailFromUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - usernames []string
func (_e *MockGitHubDiscovery_Expecter) GetEmailFromUsername(ctx interface{}, usernames interface{}) *MockGitHubDiscovery_GetEmailFromUsername_Call {
	return &MockGitHubDiscovery_GetEmailFromUsername_Call{Call: _e.mock.On("GetEmailFromUsername", ctx, usernames)}
}

func (_c *MockGitHubDiscovery_GetEmailFromUsername_Call) Run(run func(ctx context.Context, usernames []string)) *MockGitHubDiscovery_GetEmailFromUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockGitHubDiscovery_GetEmailFromUsername_Call) Return(_a0 []string, _a1 error) *MockGitHubDiscovery_GetEmailFromUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitHubDiscovery_GetEmailFromUsername_Call) RunAndReturn(run func(context.Context, []string) ([]string, error)) *MockGitHubDiscovery_GetEmailFromUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsernameFromEmail provides a mock function with given fields: ctx, emails
func (_m *MockGitHubDiscovery) GetUsernameFromEmail(ctx context.Context, emails []string) ([]string, error) {
	ret := _m.Called(ctx, emails)

	if len(ret) == 0 {
		panic("no return value specified for GetUsernameFromEmail")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]string, error)); ok {
		return rf(ctx, emails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = rf(ctx, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitHubDiscovery_GetUsernameFromEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsernameFromEmail'
type MockGitHubDiscovery_GetUsernameFromEmail_Call struct {
	*mock.Call
}

// GetUsernameFromEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - emails []string
func (_e *MockGitHubDiscovery_Expecter) GetUsernameFromEmail(ctx interface{}, emails interface{}) *MockGitHubDiscovery_GetUsernameFromEmail_Call {
	return &MockGitHubDiscovery_GetUsernameFromEmail_Call{Call: _e.mock.On("GetUsernameFromEmail", ctx, emails)}
}

func (_c *MockGitHubDiscovery_GetUsernameFromEmail_Call) Run(run func(ctx context.Context, emails []string)) *MockGitHubDiscovery_GetUsernameFromEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockGitHubDiscovery_GetUsernameFromEmail_Call) Return(_a0 []string, _a1 error) *MockGitHubDiscovery_GetUsernameFromEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitHubDiscovery_GetUsernameFromEmail_Call) RunAndReturn(run func(context.Context, []string) ([]string, error)) *MockGitHubDiscovery_GetUsernameFromEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitHubDiscovery creates a new instance of MockGitHubDiscovery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHubDiscovery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHubDiscovery {
	mock := &MockGitHubDiscovery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
