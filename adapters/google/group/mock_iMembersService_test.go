// Code generated by mockery. DO NOT EDIT.

package group

import (
	mock "github.com/stretchr/testify/mock"
	admin "google.golang.org/api/admin/directory/v1"
)

// mockIMembersService is an autogenerated mock type for the iMembersService type
type mockIMembersService struct {
	mock.Mock
}

type mockIMembersService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIMembersService) EXPECT() *mockIMembersService_Expecter {
	return &mockIMembersService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: groupKey, memberKey
func (_m *mockIMembersService) Delete(groupKey string, memberKey string) *admin.MembersDeleteCall {
	ret := _m.Called(groupKey, memberKey)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *admin.MembersDeleteCall
	if rf, ok := ret.Get(0).(func(string, string) *admin.MembersDeleteCall); ok {
		r0 = rf(groupKey, memberKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MembersDeleteCall)
		}
	}

	return r0
}

// mockIMembersService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockIMembersService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - groupKey string
//   - memberKey string
func (_e *mockIMembersService_Expecter) Delete(groupKey interface{}, memberKey interface{}) *mockIMembersService_Delete_Call {
	return &mockIMembersService_Delete_Call{Call: _e.mock.On("Delete", groupKey, memberKey)}
}

func (_c *mockIMembersService_Delete_Call) Run(run func(groupKey string, memberKey string)) *mockIMembersService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockIMembersService_Delete_Call) Return(_a0 *admin.MembersDeleteCall) *mockIMembersService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIMembersService_Delete_Call) RunAndReturn(run func(string, string) *admin.MembersDeleteCall) *mockIMembersService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: groupKey, member
func (_m *mockIMembersService) Insert(groupKey string, member *admin.Member) *admin.MembersInsertCall {
	ret := _m.Called(groupKey, member)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *admin.MembersInsertCall
	if rf, ok := ret.Get(0).(func(string, *admin.Member) *admin.MembersInsertCall); ok {
		r0 = rf(groupKey, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MembersInsertCall)
		}
	}

	return r0
}

// mockIMembersService_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type mockIMembersService_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - groupKey string
//   - member *admin.Member
func (_e *mockIMembersService_Expecter) Insert(groupKey interface{}, member interface{}) *mockIMembersService_Insert_Call {
	return &mockIMembersService_Insert_Call{Call: _e.mock.On("Insert", groupKey, member)}
}

func (_c *mockIMembersService_Insert_Call) Run(run func(groupKey string, member *admin.Member)) *mockIMembersService_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*admin.Member))
	})
	return _c
}

func (_c *mockIMembersService_Insert_Call) Return(_a0 *admin.MembersInsertCall) *mockIMembersService_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIMembersService_Insert_Call) RunAndReturn(run func(string, *admin.Member) *admin.MembersInsertCall) *mockIMembersService_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: groupKey
func (_m *mockIMembersService) List(groupKey string) *admin.MembersListCall {
	ret := _m.Called(groupKey)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *admin.MembersListCall
	if rf, ok := ret.Get(0).(func(string) *admin.MembersListCall); ok {
		r0 = rf(groupKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.MembersListCall)
		}
	}

	return r0
}

// mockIMembersService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type mockIMembersService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - groupKey string
func (_e *mockIMembersService_Expecter) List(groupKey interface{}) *mockIMembersService_List_Call {
	return &mockIMembersService_List_Call{Call: _e.mock.On("List", groupKey)}
}

func (_c *mockIMembersService_List_Call) Run(run func(groupKey string)) *mockIMembersService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockIMembersService_List_Call) Return(_a0 *admin.MembersListCall) *mockIMembersService_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIMembersService_List_Call) RunAndReturn(run func(string) *admin.MembersListCall) *mockIMembersService_List_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIMembersService creates a new instance of mockIMembersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIMembersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIMembersService {
	mock := &mockIMembersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
