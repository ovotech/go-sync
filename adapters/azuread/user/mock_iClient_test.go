// Code generated by mockery. DO NOT EDIT.

package user

import (
	abstractions "github.com/microsoft/kiota-abstractions-go"
	users "github.com/microsoftgraph/msgraph-sdk-go/users"
	mock "github.com/stretchr/testify/mock"
)

// mockIClient is an autogenerated mock type for the iClient type
type mockIClient struct {
	mock.Mock
}

type mockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIClient) EXPECT() *mockIClient_Expecter {
	return &mockIClient_Expecter{mock: &_m.Mock}
}

// GetAdapter provides a mock function with given fields:
func (_m *mockIClient) GetAdapter() abstractions.RequestAdapter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAdapter")
	}

	var r0 abstractions.RequestAdapter
	if rf, ok := ret.Get(0).(func() abstractions.RequestAdapter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(abstractions.RequestAdapter)
		}
	}

	return r0
}

// mockIClient_GetAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdapter'
type mockIClient_GetAdapter_Call struct {
	*mock.Call
}

// GetAdapter is a helper method to define mock.On call
func (_e *mockIClient_Expecter) GetAdapter() *mockIClient_GetAdapter_Call {
	return &mockIClient_GetAdapter_Call{Call: _e.mock.On("GetAdapter")}
}

func (_c *mockIClient_GetAdapter_Call) Run(run func()) *mockIClient_GetAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIClient_GetAdapter_Call) Return(_a0 abstractions.RequestAdapter) *mockIClient_GetAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIClient_GetAdapter_Call) RunAndReturn(run func() abstractions.RequestAdapter) *mockIClient_GetAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// Users provides a mock function with given fields:
func (_m *mockIClient) Users() *users.UsersRequestBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 *users.UsersRequestBuilder
	if rf, ok := ret.Get(0).(func() *users.UsersRequestBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UsersRequestBuilder)
		}
	}

	return r0
}

// mockIClient_Users_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Users'
type mockIClient_Users_Call struct {
	*mock.Call
}

// Users is a helper method to define mock.On call
func (_e *mockIClient_Expecter) Users() *mockIClient_Users_Call {
	return &mockIClient_Users_Call{Call: _e.mock.On("Users")}
}

func (_c *mockIClient_Users_Call) Run(run func()) *mockIClient_Users_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIClient_Users_Call) Return(_a0 *users.UsersRequestBuilder) *mockIClient_Users_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIClient_Users_Call) RunAndReturn(run func() *users.UsersRequestBuilder) *mockIClient_Users_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIClient creates a new instance of mockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIClient {
	mock := &mockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
