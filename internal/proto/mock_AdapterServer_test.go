// Code generated by mockery. DO NOT EDIT.

package proto

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapterServer is an autogenerated mock type for the AdapterServer type
type MockAdapterServer struct {
	mock.Mock
}

type MockAdapterServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapterServer) EXPECT() *MockAdapterServer_Expecter {
	return &MockAdapterServer_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *MockAdapterServer) Add(_a0 context.Context, _a1 *AddRequest) (*AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *AddResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *AddRequest) (*AddResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *AddRequest) *AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AddResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapterServer_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockAdapterServer_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *AddRequest
func (_e *MockAdapterServer_Expecter) Add(_a0 interface{}, _a1 interface{}) *MockAdapterServer_Add_Call {
	return &MockAdapterServer_Add_Call{Call: _e.mock.On("Add", _a0, _a1)}
}

func (_c *MockAdapterServer_Add_Call) Run(run func(_a0 context.Context, _a1 *AddRequest)) *MockAdapterServer_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*AddRequest))
	})
	return _c
}

func (_c *MockAdapterServer_Add_Call) Return(_a0 *AddResponse, _a1 error) *MockAdapterServer_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapterServer_Add_Call) RunAndReturn(run func(context.Context, *AddRequest) (*AddResponse, error)) *MockAdapterServer_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockAdapterServer) Get(_a0 context.Context, _a1 *GetRequest) (*GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetRequest) (*GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetRequest) *GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapterServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAdapterServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetRequest
func (_e *MockAdapterServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockAdapterServer_Get_Call {
	return &MockAdapterServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockAdapterServer_Get_Call) Run(run func(_a0 context.Context, _a1 *GetRequest)) *MockAdapterServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetRequest))
	})
	return _c
}

func (_c *MockAdapterServer_Get_Call) Return(_a0 *GetResponse, _a1 error) *MockAdapterServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapterServer_Get_Call) RunAndReturn(run func(context.Context, *GetRequest) (*GetResponse, error)) *MockAdapterServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *MockAdapterServer) Init(_a0 context.Context, _a1 *InitRequest) (*InitResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *InitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *InitRequest) (*InitResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *InitRequest) *InitResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *InitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapterServer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockAdapterServer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *InitRequest
func (_e *MockAdapterServer_Expecter) Init(_a0 interface{}, _a1 interface{}) *MockAdapterServer_Init_Call {
	return &MockAdapterServer_Init_Call{Call: _e.mock.On("Init", _a0, _a1)}
}

func (_c *MockAdapterServer_Init_Call) Run(run func(_a0 context.Context, _a1 *InitRequest)) *MockAdapterServer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*InitRequest))
	})
	return _c
}

func (_c *MockAdapterServer_Init_Call) Return(_a0 *InitResponse, _a1 error) *MockAdapterServer_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapterServer_Init_Call) RunAndReturn(run func(context.Context, *InitRequest) (*InitResponse, error)) *MockAdapterServer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *MockAdapterServer) Remove(_a0 context.Context, _a1 *RemoveRequest) (*RemoveResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RemoveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveRequest) (*RemoveResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RemoveRequest) *RemoveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RemoveResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RemoveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapterServer_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockAdapterServer_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *RemoveRequest
func (_e *MockAdapterServer_Expecter) Remove(_a0 interface{}, _a1 interface{}) *MockAdapterServer_Remove_Call {
	return &MockAdapterServer_Remove_Call{Call: _e.mock.On("Remove", _a0, _a1)}
}

func (_c *MockAdapterServer_Remove_Call) Run(run func(_a0 context.Context, _a1 *RemoveRequest)) *MockAdapterServer_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RemoveRequest))
	})
	return _c
}

func (_c *MockAdapterServer_Remove_Call) Return(_a0 *RemoveResponse, _a1 error) *MockAdapterServer_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapterServer_Remove_Call) RunAndReturn(run func(context.Context, *RemoveRequest) (*RemoveResponse, error)) *MockAdapterServer_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAdapterServer provides a mock function with given fields:
func (_m *MockAdapterServer) mustEmbedUnimplementedAdapterServer() {
	_m.Called()
}

// MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAdapterServer'
type MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAdapterServer is a helper method to define mock.On call
func (_e *MockAdapterServer_Expecter) mustEmbedUnimplementedAdapterServer() *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	return &MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAdapterServer")}
}

func (_c *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call) Run(run func()) *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call) Return() *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call) RunAndReturn(run func()) *MockAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapterServer creates a new instance of MockAdapterServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapterServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapterServer {
	mock := &MockAdapterServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
