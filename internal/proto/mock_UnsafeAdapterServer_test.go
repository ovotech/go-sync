// Code generated by mockery. DO NOT EDIT.

package proto

import mock "github.com/stretchr/testify/mock"

// MockUnsafeAdapterServer is an autogenerated mock type for the UnsafeAdapterServer type
type MockUnsafeAdapterServer struct {
	mock.Mock
}

type MockUnsafeAdapterServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsafeAdapterServer) EXPECT() *MockUnsafeAdapterServer_Expecter {
	return &MockUnsafeAdapterServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedAdapterServer provides a mock function with given fields:
func (_m *MockUnsafeAdapterServer) mustEmbedUnimplementedAdapterServer() {
	_m.Called()
}

// MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAdapterServer'
type MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAdapterServer is a helper method to define mock.On call
func (_e *MockUnsafeAdapterServer_Expecter) mustEmbedUnimplementedAdapterServer() *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	return &MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAdapterServer")}
}

func (_c *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call) Run(run func()) *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call) Return() *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call) RunAndReturn(run func()) *MockUnsafeAdapterServer_mustEmbedUnimplementedAdapterServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnsafeAdapterServer creates a new instance of MockUnsafeAdapterServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsafeAdapterServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsafeAdapterServer {
	mock := &MockUnsafeAdapterServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
