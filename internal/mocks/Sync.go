// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ports "github.com/ovotech/go-sync/pkg/ports"
	mock "github.com/stretchr/testify/mock"
)

// Sync is an autogenerated mock type for the Sync type
type Sync struct {
	mock.Mock
}

type Sync_Expecter struct {
	mock *mock.Mock
}

func (_m *Sync) EXPECT() *Sync_Expecter {
	return &Sync_Expecter{mock: &_m.Mock}
}

// SyncWith provides a mock function with given fields: ctx, adapter
func (_m *Sync) SyncWith(ctx context.Context, adapter ports.Adapter) error {
	ret := _m.Called(ctx, adapter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.Adapter) error); ok {
		r0 = rf(ctx, adapter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sync_SyncWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncWith'
type Sync_SyncWith_Call struct {
	*mock.Call
}

// SyncWith is a helper method to define mock.On call
//   - ctx context.Context
//   - adapter ports.Adapter
func (_e *Sync_Expecter) SyncWith(ctx interface{}, adapter interface{}) *Sync_SyncWith_Call {
	return &Sync_SyncWith_Call{Call: _e.mock.On("SyncWith", ctx, adapter)}
}

func (_c *Sync_SyncWith_Call) Run(run func(ctx context.Context, adapter ports.Adapter)) *Sync_SyncWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ports.Adapter))
	})
	return _c
}

func (_c *Sync_SyncWith_Call) Return(_a0 error) *Sync_SyncWith_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSync interface {
	mock.TestingT
	Cleanup(func())
}

// NewSync creates a new instance of Sync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSync(t mockConstructorTestingTNewSync) *Sync {
	mock := &Sync{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
