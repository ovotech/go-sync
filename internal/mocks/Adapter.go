// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *Adapter) Add(_a0 context.Context, _a1 []string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Adapter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Adapter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []string
func (_e *Adapter_Expecter) Add(_a0 interface{}, _a1 interface{}) *Adapter_Add_Call {
	return &Adapter_Add_Call{Call: _e.mock.On("Add", _a0, _a1)}
}

func (_c *Adapter_Add_Call) Run(run func(_a0 context.Context, _a1 []string)) *Adapter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Adapter_Add_Call) Return(_a0 error) *Adapter_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *Adapter) Get(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Adapter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Adapter_Expecter) Get(ctx interface{}) *Adapter_Get_Call {
	return &Adapter_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *Adapter_Get_Call) Run(run func(ctx context.Context)) *Adapter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Adapter_Get_Call) Return(_a0 []string, _a1 error) *Adapter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *Adapter) Remove(_a0 context.Context, _a1 []string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Adapter_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Adapter_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []string
func (_e *Adapter_Expecter) Remove(_a0 interface{}, _a1 interface{}) *Adapter_Remove_Call {
	return &Adapter_Remove_Call{Call: _e.mock.On("Remove", _a0, _a1)}
}

func (_c *Adapter_Remove_Call) Run(run func(_a0 context.Context, _a1 []string)) *Adapter_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Adapter_Remove_Call) Return(_a0 error) *Adapter_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
