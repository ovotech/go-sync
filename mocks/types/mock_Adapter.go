// Code generated by mockery. DO NOT EDIT.

package types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, things
func (_m *MockAdapter) Add(ctx context.Context, things []string) error {
	ret := _m.Called(ctx, things)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, things)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockAdapter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - things []string
func (_e *MockAdapter_Expecter) Add(ctx interface{}, things interface{}) *MockAdapter_Add_Call {
	return &MockAdapter_Add_Call{Call: _e.mock.On("Add", ctx, things)}
}

func (_c *MockAdapter_Add_Call) Run(run func(ctx context.Context, things []string)) *MockAdapter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockAdapter_Add_Call) Return(_a0 error) *MockAdapter_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Add_Call) RunAndReturn(run func(context.Context, []string) error) *MockAdapter_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockAdapter) Get(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAdapter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAdapter_Expecter) Get(ctx interface{}) *MockAdapter_Get_Call {
	return &MockAdapter_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockAdapter_Get_Call) Run(run func(ctx context.Context)) *MockAdapter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAdapter_Get_Call) Return(things []string, err error) *MockAdapter_Get_Call {
	_c.Call.Return(things, err)
	return _c
}

func (_c *MockAdapter_Get_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockAdapter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, things
func (_m *MockAdapter) Remove(ctx context.Context, things []string) error {
	ret := _m.Called(ctx, things)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, things)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockAdapter_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - things []string
func (_e *MockAdapter_Expecter) Remove(ctx interface{}, things interface{}) *MockAdapter_Remove_Call {
	return &MockAdapter_Remove_Call{Call: _e.mock.On("Remove", ctx, things)}
}

func (_c *MockAdapter_Remove_Call) Run(run func(ctx context.Context, things []string)) *MockAdapter_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockAdapter_Remove_Call) Return(_a0 error) *MockAdapter_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Remove_Call) RunAndReturn(run func(context.Context, []string) error) *MockAdapter_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
